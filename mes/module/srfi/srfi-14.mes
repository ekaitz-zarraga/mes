;;; -*-scheme-*-

;;; GNU Mes --- Maxwell Equations of Software
;;; Copyright Â© 2016,2018 Jan (janneke) Nieuwenhuizen <janneke@gnu.org>
;;;
;;; This file is part of GNU Mes.
;;;
;;; GNU Mes is free software; you can redistribute it and/or modify it
;;; under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 3 of the License, or (at
;;; your option) any later version.
;;;
;;; GNU Mes is distributed in the hope that it will be useful, but
;;; WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with GNU Mes.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;;; Minimal implementation of srfi-14, for nyacc.

;;; Code:

;; FIXME: have structs
(define (char-set . x)
  (cons '*char-set* x))

(define (char-set? x)
  (and (pair? x) (eq? (car x) '*char-set*)))

(define (char-set= a b)
  (and (char-set? a) (char-set? b)
       (equal? a b)))

(define char-set:whitespace (char-set #\tab #\page #\return #\vtab #\newline #\space))

(define (list->char-set lst)
  (apply char-set lst))

(define (string->char-set x . base)
  (apply char-set (append (string->list x) (if (null? base) '() (cdar base)))))

(define (string->char-set! x base)
  (set-cdr! (last-pair base) (string->list x))
  base)

(define (char-set-adjoin cs . chars)
  (append cs chars))

(define (char-set-contains? cs x)
  (and (memq x cs) #t))

(define (char-set-complement cs)
  (let ((ascii (map integer->char (iota 128))))
    (list->char-set (filter (lambda (c) (not (char-set-contains? cs c))) ascii))))

(define (char-whitespace? c)
  (char-set-contains? char-set:whitespace c))

(define (char-set-copy cs)
  (map identity cs))
